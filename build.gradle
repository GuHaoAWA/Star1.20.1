buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.20.1-1.0'
group = 'com.guhao.stars'

base {
    archivesName = 'Stars1.20.1-1.0' + System.currentTimeSeconds()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mixin', 'stars.mixins.json'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }

    maven { url 'https://maven.fallenbreath.me/releases' }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url "https://maven.minecraftforge.net/" }

    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin 依赖
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation 'org.spongepowered:mixin:0.8.5'

    implementation 'me.fallenbreath:conditional-mixin-forge:0.6.4'

    // 其他依赖
    implementation fg.deobf("libs:EFR:20.12.2")
    implementation fg.deobf("libs:epicfight:20.12.5")
    implementation fg.deobf("libs:indestructible-20.12.1:1.0")
    implementation fg.deobf("libs:TickChanger-1.20.1-1.0:1.0")
    implementation fg.deobf("libs:citadel-2.6.1-1.20.1:1.0")
    implementation fg.deobf("libs:alexsmobs-1.22.9:1.0")
    implementation fg.deobf("libs:curios-forge-5.11.1+1.20.1:1.0")
    implementation fg.deobf("libs:caelus-forge-3.2.0+1.20.1:1.0")
    implementation fg.deobf("libs:player-animation-lib-forge-1.0.2-rc1+1.20:1.1")
    implementation fg.deobf("libs:blue_skies-1.20.1-1.3.31:1.1")
    implementation fg.deobf("libs:structure_gel-1.20.1-2.16.2:1.1")
    implementation fg.deobf("libs:irons_spellbooks-1.20.1-3.4.0.7:1.1")
    implementation fg.deobf("libs:Prism-1.20.1-forge-1.0.5:1.1")
    implementation fg.deobf("libs:Iceberg-1.20.1-forge-1.1.25:1.1")
    implementation fg.deobf("libs:moonlight-1.20-2.13.83-forge:1.1")
    implementation fg.deobf("libs:dummmmmmy-1.20-2.0.6:1.1")
    implementation fg.deobf("libs:ldlib-forge-1.20.1-1.0.39:1.1")
    implementation fg.deobf("libs:photon-forge-1.20.1-1.1.7:1.1")
    implementation fg.deobf("libs:ShoulderSurfing-Forge-1.20.1-2.4.1:1.0")
    /*implementation fg.deobf("libs:dote:1.0")*/
    implementation fg.deobf("libs:SmartKeyPrompts-1.20.1-forge-1.1.0-all:1.0")
    /*implementation fg.deobf("libs:mowziesmobs-1.7.2:1.0")*/
    /*implementation fg.deobf("libs:duelcraft-3.0:3.0")*/
    implementation fg.deobf("libs:L_Enders_Cataclysm-2.63:1.0")
    implementation fg.deobf("libs:lionfishapi-2.4:1.0")
    implementation fg.deobf("libs:Xaeros_Minimap_25.2.6_Forge_1.20:1.0")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.1:4.7.1.2")
    implementation("com.eliotlash.mclib:mclib:20")
}

mixin {
    add sourceSets.main, "stars.refmap.json"
    config 'stars.mixins.json'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "stars.mixins.json"
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
